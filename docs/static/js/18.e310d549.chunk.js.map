{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","nodes/Header/DesktopToolbar.js","components/Header/DesktopToolbar.jsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","createNode","props","state","actions","styl","Styles","isLight","logo","React","useRef","logoDark","titleLogo","titleLogoDark","useEffect","a","current","default","Error","CONTENT_LOAD_COMPLETE","asyncLoad","Fragment","className","logoContainer","iconContainer","onClick","history","push","allContentLoaded","alt","width","height","src","logoTitle","node","dispatchNode","useAction"],"mappings":"mHAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAIxB,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,GAGnEjB,OAAMkB,OA/BZ,mC,8HCI6BC,qBAAW,kBCEf,SAAC,GAInB,IAHCC,EAGF,EAHEA,MACAC,EAEF,EAFEA,MACAC,EACF,EADEA,QAEMC,EAAOC,cACLC,EAAYL,EAAZK,QACFC,EAAOC,IAAMC,OAAO,MACpBC,EAAWF,IAAMC,OAAO,MACxBE,EAAYH,IAAMC,OAAO,MACzBG,EAAgBJ,IAAMC,OAAO,MAoBnC,OAlBAD,IAAMK,WAAU,YACO,uCAAG,sBAAAC,EAAA,mEAEER,EAFF,iCAG4B,+BAH5B,cAGMC,EAAKQ,QAHX,OAGoEC,QAHpE,SAIiC,+BAJjC,OAIML,EAAUI,QAJhB,OAI0EC,QAJ1E,yCAMgC,+BANhC,eAMMN,EAASK,QANf,OAM4EC,QAN5E,UAOqC,+BAPrC,QAOMJ,EAAcG,QAPpB,OAOkFC,QAPlF,gEAUI,IAAIC,MAAM,4BAVd,yBAYFd,EAAQe,wBAZN,6EAAH,qDAefC,KACL,CAAChB,EAASG,IAEL,cAAC,IAAMc,SAAP,UACQ,qBAAKC,UAAWjB,EAAKkB,cAArB,SACQ,eAAC,IAAD,CACQD,UAAWjB,EAAKmB,cAChBC,QAAS,kBAAMvB,EAAMwB,QAAQC,KAAK,MAF1C,UAKiBxB,EAAMyB,mBAAqBpB,EAAKQ,SAAWL,EAASK,UAC7C,qBACQa,IAAI,OACJC,MAAM,KACNC,OAAO,KACPT,UAAWjB,EAAKG,KAChBwB,IAAKzB,EAAUC,EAAKQ,QAAUL,EAASK,UAKtDb,EAAMyB,mBAAqBhB,EAAUI,SAAWH,EAAcG,UACvD,qBACQa,IAAI,OACJC,MAAM,MACNC,OAAO,KACPT,UAAWjB,EAAK4B,UAChBD,IAAKzB,EAAUK,EAAUI,QAAUH,EAAcG,oB,mBDzD1GkB,E,KAAMC,E,KAEbD,EAAK/B,MAAM,CACPyB,kBAAkB,IAGtBM,EAAKE,UAAU,wBAAyB,CACpCR,kBAAkB,IAIPO,YAAaD","file":"./static/js/18.e310d549.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { createNode } from '@rootzjs/core';\nimport { Component } from '../../components/Header/DesktopToolbar';\n\n// create Node for App Header\nconst [node, dispatchNode] = createNode(\"DesktopToolbar\", Component);\n\nnode.state({\n    allContentLoaded: false\n});\n\nnode.useAction(\"CONTENT_LOAD_COMPLETE\", {\n    allContentLoaded: true\n});\n\n// dispatch Node\nexport default dispatchNode(node);","import React from 'react';\nimport { IconButton } from '../../Matlib';\n\n// styles\nimport { Styles } from \"../../styles/AppHeader\";\n\nexport const Component = ({\n        props,\n        state,\n        actions\n}) => {\n        const styl = Styles();\n        const { isLight } = props;\n        const logo = React.useRef(null);\n        const logoDark = React.useRef(null);\n        const titleLogo = React.useRef(null);\n        const titleLogoDark = React.useRef(null);\n\n        React.useEffect(() => {\n                const asyncLoad = async () => {\n                        try {\n                                if (isLight) {\n                                        logo.current = (await import(\"../../assets/images/logo.svg\")).default;\n                                        titleLogo.current = (await import(\"../../assets/images/title.svg\")).default;\n                                } else {\n                                        logoDark.current = (await import(\"../../assets/images/logoDark.svg\")).default;\n                                        titleLogoDark.current = (await import(\"../../assets/images/titleDark.svg\")).default;\n                                }\n                        } catch {\n                                throw new Error(\"error in loading content\");\n                        } finally {\n                                actions.CONTENT_LOAD_COMPLETE();\n                        }\n                }\n                asyncLoad();\n        }, [actions, isLight]);\n        return (\n                <React.Fragment>\n                        <div className={styl.logoContainer}>\n                                <IconButton\n                                        className={styl.iconContainer}\n                                        onClick={() => props.history.push(\"/\")}\n                                >\n                                        {\n                                                (state.allContentLoaded && (logo.current || logoDark.current)) && (\n                                                        <img\n                                                                alt=\"logo\"\n                                                                width=\"37\"\n                                                                height=\"30\"\n                                                                className={styl.logo}\n                                                                src={isLight ? logo.current : logoDark.current}\n                                                        />\n                                                )\n                                        }\n                                        {\n                                                (state.allContentLoaded && (titleLogo.current || titleLogoDark.current)) && (\n                                                        < img\n                                                                alt=\"logo\"\n                                                                width=\"110\"\n                                                                height=\"22\"\n                                                                className={styl.logoTitle}\n                                                                src={isLight ? titleLogo.current : titleLogoDark.current}\n                                                        />\n                                                )\n                                        }\n                                </IconButton>\n                        </div>\n                </React.Fragment>\n        )\n}"],"sourceRoot":""}